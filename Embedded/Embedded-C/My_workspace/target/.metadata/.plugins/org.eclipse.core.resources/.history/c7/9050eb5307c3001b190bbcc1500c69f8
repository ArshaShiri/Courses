/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
	const uint32_t baseAddressOfRccRegisters = (uint32_t)0x40023800;
	const uint32_t baseAddressOfPA = (uint32_t)0x40020000;
	const uint32_t baseAddressOfPD = (uint32_t)0x40020C00;

	// IO port clock enable
	// First set the address to RCC AHB1 peripheral clock register
	// Then set bit 0 and 3 to 1
	uint32_t* AHB1Address = (uint32_t*)(baseAddressOfRccRegisters + (uint32_t)0x30);
	*AHB1Address |= 1;
	*AHB1Address |= (3 << 1);

	// Set the mode of PA0 to input (to be able to read the voltage)
	uint32_t* modeRegisterA = (uint32_t*)baseAddressOfPA;
	*modeRegisterA &= ~3;

	// Set the mode of PD12 to output (to be able to toggle the LED)
	uint32_t* modeRegisterD = (uint32_t*)baseAddressOfPD;
	*modeRegisterD |= (1 << 24);


	const uint32_t* portAInRegister = (uint32_t*)(baseAddressOfPA + (uint32_t)0x10);
	uint32_t* portDOutRegister = (uint32_t*)(baseAddressOfPD + (uint32_t)0x14);

   while (1)
   {
	   uint32_t valueOfA0Input = (uint32_t)((*portAInRegister) & 0x1);
	   *portDOutRegister = ((*portDOutRegister) | (1 << 12));
   }
}
