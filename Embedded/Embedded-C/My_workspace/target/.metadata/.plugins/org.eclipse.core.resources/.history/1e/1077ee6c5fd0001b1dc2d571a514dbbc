/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

#include "main.h"
#include "led.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};
uint32_t task_handlers[MAX_TASKS];
uint8_t current_task = 0; // Task 1 is running.

void task1_handler(void);
void task2_handler(void);
void task3_handler(void);
void task4_handler(void);

void init_systick_timer(uint32_t tick_hz);
__attribute__((naked)) void init_scheduler_stack(uint32_t scheduler_stack_start);
void init_tasks_stack(void);
void enable_processor_faults(void);
__attribute ((naked)) void switch_sp_to_psp(void);

int main(void)
{
	enable_processor_faults();
	init_scheduler_stack(SCHEDULER_STACK_START);

	task_handlers[0] = (uint32_t)task1_handler;
	task_handlers[1] = (uint32_t)task2_handler;
	task_handlers[2] = (uint32_t)task3_handler;
	task_handlers[3] = (uint32_t)task4_handler;

	init_tasks_stack();

	led_init_all();

	init_systick_timer(TICK_HZ);

	switch_sp_to_psp();
	task1_handler();

	for(;;);
}

void task1_handler(void)
{
	while (1)
	{
		led_on(LED_GREEN);
		delay(DELAY_COUNT_1S);
		led_off(LED_GREEN);
		delay(DELAY_COUNT_1S);
	}
}

void task2_handler(void)
{
	while (1)
	{
		led_on(LED_ORANGE);
		delay(DELAY_COUNT_500MS);
		led_off(LED_ORANGE);
		delay(DELAY_COUNT_500MS);
	}
}

void task3_handler(void)
{
	while (1)
	{
		led_on(LED_BLUE);
		delay(DELAY_COUNT_250MS);
		led_off(LED_BLUE);
		delay(DELAY_COUNT_250MS);
	}
}

void task4_handler(void)
{
	while (1)
	{
		led_on(LED_REd);
		delay(DELAY_COUNT_125MS);
		led_off(LED_REd);
		delay(DELAY_COUNT_125MS);
	}
}

void init_systick_timer(uint32_t tick_hz)
{
	uint32_t count_value = SYSTICK_TIME_CLK / tick_hz - 1;

	// SVR
	uint32_t *p_sys_tick_reload_vlue_register = (uint32_t *) 0xE000E014;

	// SCSR
	uint32_t *p_sys_tick_control_and_status_register = (uint32_t *) 0xE000E010;


	// Clear the value of SVR register (only 24 bits are valid)
	*p_sys_tick_reload_vlue_register &= ~(0x00FFFFFFFF);


	// Load the value in SVR register.
	*p_sys_tick_reload_vlue_register |= count_value;

	// Do some settings

	// Enable systik exception request.
	*p_sys_tick_control_and_status_register |= (1 << 1);

	// Indicates the clock source, processor clock source.
	*p_sys_tick_control_and_status_register |= (1 << 2);

	// Enables the counter.
	*p_sys_tick_control_and_status_register |= 1;

	// The three operations above are equivalent to *p_sys_tick_control_and_status_register |= 7;

	// Enable the systick
}

// We want to change the value of the MSP register. This is a special register that can only be modified by assembly code.
__attribute__((naked)) void init_scheduler_stack(uint32_t scheduler_stack_start)
{
	__asm volatile("MSR MSP, %0": : "r" (scheduler_stack_start) :);
	// Or (Arg 1 of the function (scheduler_stack_start) is stored in R0 based on the documentation.)
	// __asm volatile("MSR MSP,R0");

	// Return to main. (LR has the return address)
	__asm volatile("Bx LR");
}

void init_tasks_stack(void)
{
	uint32_t *pPSP;

	for (int i = 0; i < MAX_TASKS; ++i)
	{
		pPSP = (uint32_t *)psp_of_tasks[i];

		// Start initializing the stack:
		// This is done based on the design of the stacks and what register values should be pushed.
		pPSP--;
		*pPSP =  DUMMY_XPSR; // 0x01000000

		pPSP--;
		*pPSP =  task_handlers[i]; // pc

		pPSP--;
		*pPSP =  0xFFFFFFFD; // LR Return mode: return to the return address and use psp as the stack pointer.

		int number_of_other_registers = 13;
		for (int j = 0; j < number_of_other_registers; ++j)
		{
			pPSP--;
			*pPSP =  0;
		}

		// Store the value of psp
		psp_of_tasks[i] = (uint32_t)pPSP;
	}
}

void enable_processor_faults(void)
{
	//1. enable all configurable exceptions : usage fault, mem manage fault and bus fault

	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;

	*pSHCSR |= ( 1 << 16); //mem manage
	*pSHCSR |= ( 1 << 17); //bus fault
	*pSHCSR |= ( 1 << 18); //usage fault
}

uint32_t get_psp_value(void)
{
	return psp_of_tasks[current_task];
}

void save_psp_value(uint32_t psp_value)
{
	psp_of_tasks[current_task] = psp_value;
}

void update_next_task(void)
{
	current_task++;
	current_task %= MAX_TASKS;
}

__attribute ((naked)) void switch_sp_to_psp(void)
{
	// Initialize psp with task 1 stack start.

	// Get the psp value of the current task.
	// BL branch and link (come back to this function)
	// The return value is stored in R0
	// The LR receives the return address from PC when a Branch and Link (BL) or Branch and Link with Exchange (BLX) instruction is executed.
	__asm volatile ("PUSH {LR}"); // Push the return value to main since after calling get_psp_value, LR is going to be corrupted.
	__asm volatile ("BL get_psp_value");
	__asm volatile ("MSR PSP,R0"); // Initialize psp
	__asm volatile ("POP {LR}");

	// Change sp to psp using control registers.
	// Set second bit of control register to 1
	__asm volatile ("MOV R0,#0X02");
	__asm volatile ("MSR CONTROL,R0");

	// Return to main. (LR has the return address)
	__asm volatile("Bx LR");
}

__attribute ((naked)) void SysTick_Handler(void)
{
	// Save the context of the current task

	// 1. Get current running task's psp value.
	__asm volatile ("MRS R0,PSP");

	// 2. Using that PSP value store SF2(R4 to R11).
	// We cannot use push here cause the handler is using the msp as stack and we want to push the values
	// in the stack pointed by psp. Use STMDB instead, decrement first and store (like push!)
	// ! returns the last address back to R0
	__asm volatile ("STMDB R0!,{R4-R11}");

	__asm volatile ("PUSH {LR}");

	// 3. Save the current value of PSP.
	// R0 already has the first argument of save_psp_value
	__asm volatile ("BL save_psp_value");

	// Retrieve the next tasks

	// 1. Decide next task to run.
	__asm volatile ("BL update_next_task");

	// 2. Get its past psp value
	__asm volatile ("BL get_psp_value");

	// 3. Using that psp value retrieve SF2(R4 to R11).
	__asm volatile ("LDMIA R0!,{R4-R11}");

	// 4. Update psp and exit.
	__asm volatile ("MSR PSP,R0");

	__asm volatile ("POP {LR}");

	__asm volatile("BX LR");
}

//2. implement the fault handlers
void HardFault_Handler(void)
{
	printf("Exception : Hardfault\n");
	while(1);
}


void MemManage_Handler(void)
{
	printf("Exception : MemManage\n");
	while(1);
}

void BusFault_Handler(void)
{
	printf("Exception : BusFault\n");
	while(1);
}
