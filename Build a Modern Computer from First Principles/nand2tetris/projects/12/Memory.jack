// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

  static array ram;
  static Array heap;
  static int freeList;  

  /** Initializes the class. */
  function void init() {
    let ram = 0;
    
    // Heap base
    let heap = 2048; 
    
    // Next
    let heap[0] = 0; 
    
    // Length
    let heap[1] = 14335;
    
    // At first, all of the heap is available.
    let freeList = 2048;
    
    return;
  }

  /** Returns the RAM value at the given address. */
  function int peek(int address) {
    return ram[address];
  }

  /** Sets the RAM value at the given address to the given value. */
  function void poke(int address, int value) {
    let ram[address] = value;
    return;
  }

  /** Finds an available RAM block of the given size and returns
   *  a reference to its base address. */
  function int alloc(int size) {
    var int currentFreeList;
    var int differenceToHeapBase;
    var int currentSize;
    
    let currentFreeList = freeList;
    
    // It is assumed that we can always find new memory blocks and we do not have defragmentation problems.
    while (true) {
      let differenceToHeapBase = currentFreeList - heap;
      let currentSize = heap[differenceToHeapBase + 1];
      
      if (currentSize > size + 2) {
        // Reduce the size from the current size.
        let heap[differenceToHeapBase + 1] = currentSize - size - 2;
        
        // Assign the size to the new block
        let heap[differenceToHeapBase + currentSize - size - 1] = size;
      
        // Give the base address of memory block taken from the end of this block.
        return (currentFreeList + currentSize - size);
      }
      
      let currentFreeList = heap[currentFreeList];
    }    
    
    return -1;
  }

  /** De-allocates the given object (cast as an array) by making
   *  it available for future allocations. */
  function void deAlloc(Array o) {
    var int currentFreeList;
    var int currentSize;
    
    let currentFreeList = freeList;
    
    while (~(currentFreeList = 0)) {
      let currentFreeList = heap[currentFreeList];
    }
    
    let heap[currentFreeList] = o;
    
    return;
  }    
}
