/**
 * Implements the Snake
 */
 
 class SnakeGame
 { 
   field Snake snake;
   field int snakePartSize;
   field int direction; // the snake's current direction: 
                        // 1=up, 2=down, 3=left, 4=right
                        // By default, the snake starts going right.

   field int delay;
   
   /** Constructs a new Snake Game. */
   constructor SnakeGame new() 
   {
      let snake = Snake.new();
      let delay = 50;
      let direction = 2;
      let snakePartSize = snake.getSnakePartSize();
      return this;
   }

   /** Disposes this game. */
   method void dispose() 
   {
      do snake.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the snake in the current direction. */
   method void moveSnake() 
   {
      if (direction = 1) { do snake.moveUp(); }
      if (direction = 2) { do snake.moveDown(); }
      if (direction = 3) { do snake.moveLeft(); }
      if (direction = 4) { do snake.moveRight(); }
      do Sys.wait(delay);   // delays the next movement
      return;
   }


   /** Runs the game: handles the user's inputs and moves the snake accordingly */
   method void run() 
   {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;
      
      while (~exit) 
      {
         let key = Keyboard.keyPressed();

         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow
         
         if (key = 65) { do addPoint(); }   // for debugging purposes
         do moveSnake();  
     }
     return;
   }

   method void addPoint()
   {
     var int x;
     var int y;
     var Point snakeHead;
     
     let snakeHead = snake.getHeadPoint();
     let x = snakeHead.getXCoord();
     let y = snakeHead.getYCoord();
     
     if (direction = 1) { do snake.addPoint(x, y + snakePartSize); } // Up
     if (direction = 2) { do snake.addPoint(x, y - snakePartSize); } // Down
     if (direction = 3) { do snake.addPoint(x - snakePartSize, y); } // Left
     if (direction = 4) { do snake.addPoint(x + snakePartSize, y); } // Right
     
     return;
   } 
 }